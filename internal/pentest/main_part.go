package pentest

import (
	"Container_runtime_scanner/internal/data"
	"Container_runtime_scanner/internal/docker"
	"Container_runtime_scanner/internal/pentest/exp"
	"fmt"
	"log"
	"os"
	"path/filepath"
)

type Vulnerability struct {
	ID        string // 漏洞ID
	Name      string // 漏洞名称
	Type      string // 类型
	Severity  string
	CvssScore float64
}

func VerifyVul(cont *docker.Container) []*Vulnerability {
	if !cont.IsDocker() {
		log.Fatalf("该系统不是容器")
	}
	// 打开日志文件（追加模式）
	logFile, err := os.OpenFile("./internal/data/log/"+cont.Name+"_scan.log", os.O_CREATE|os.O_WRONLY, 0644)

	if err != nil {
		log.Fatalf("无法打开日志文件: %v", err)
	}
	defer logFile.Close()

	// 创建日志记录器
	logger := log.New(logFile, "", log.LstdFlags)
	number := []int{}
	pocs := data.ReadFile("internal/data/database.json")
	for _, poc := range pocs {

		output := cont.ExecSteps(poc.TestCmd)

		if data.RegexGetBool(poc.ExpectedOutput, output) {
			logger.Println("----------------------")
			logger.Printf("漏洞名: %s\n描述: %s\n", poc.PocName, poc.Description)
			logger.Println("该漏洞可能存在")

			number = append(number, poc.Id)
		} else {
			logger.Println(poc.PocName, "漏洞不存在")
		}

		logger.Println("----------------------")
	}
	detectedVulIDs := []int{}
	for _, id := range number {
		if id == 1 {
			exp.Exploit_pri(logger, cont)
			detectedVulIDs = append(detectedVulIDs, id)
		}
		if id == 2 {
			exp.Exploit_sock(logger, cont)
			detectedVulIDs = append(detectedVulIDs, id)
		}
		if id == 3 {
			exp.Exploit_procfs(logger, cont)
			detectedVulIDs = append(detectedVulIDs, id)
		}
		if id == 4 {
			exp.Exploit_cve_2024_21626(logger, cont)
			detectedVulIDs = append(detectedVulIDs, id)
		}
		if id == 5 {
			exp.Exploit_cve_2022_0492(logger, cont)
			detectedVulIDs = append(detectedVulIDs, id)
		}
		if id == 6 {
			exp.Exploit_cap_sys_module(logger, cont)
			detectedVulIDs = append(detectedVulIDs, id)
		}
		if id == 7 {
			exp.Exploit_cve_2019_5736(logger, cont)
			detectedVulIDs = append(detectedVulIDs, id)
		}
	}

	vuls := make([]*Vulnerability, 0)
	for _, poc := range pocs {
		output := cont.ExecSteps(poc.TestCmd)

		if data.RegexGetBool(poc.ExpectedOutput, output) {
			logger.Println("----------------------")
			logger.Printf("漏洞名: %s\n描述: %s\n", poc.PocName, poc.Description)
			logger.Println("该漏洞可能存在")

			// 记录检测到的漏洞ID
			detectedVulIDs = append(detectedVulIDs, poc.Id)

			// 添加到返回的漏洞列表
			vul := &Vulnerability{
				ID:        fmt.Sprintf("%d", poc.Id),
				Name:      poc.PocName,
				Type:      poc.VulType,  // 可以从poc中获取更准确的类型
				Severity:  poc.Severity, // 辅助函数，根据漏洞ID计算严重性
				CvssScore: poc.CvssScore,
			}
			vuls = append(vuls, vul)
		} else {
			logger.Println(poc.PocName, "漏洞不存在")
		}

		logger.Println("----------------------")
	}
	return vuls
}

func start() {
	tmpDir := os.TempDir()
	filePath := filepath.Join(tmpDir, "Container_runtime_scanner")
	file, err := os.Create(filePath)
	if err != nil {
		log.Fatalf("文件创建失败: %v", err)
	}
	_, err = file.WriteString("Container_runtime_scanner_123456")
	if err != nil {
		log.Fatalf("文件写入失败: %v", err)
	}
	err1 := file.Close()
	if err1 != nil {
		return
	}

	fmt.Printf("文件已创建: %s\n", filePath)
}
func end() {
	tmpDir := os.TempDir()
	filePath := filepath.Join(tmpDir, "Container_runtime_scanner")
	if err := os.Remove(filePath); err != nil {
		log.Fatalf("文件删除失败: %v", err)
	}
	fmt.Printf("文件已删除: %s\n", filePath)
}
func Run() {
	docker.SSHInit("192.168.52.147")
	start()
	containers := docker.ListRunningContainers()
	for _, cont := range containers {
		VerifyVul(cont)
	}
	end()
}

func ScanNode(IPAddress string) (map[string][]*Vulnerability, error) {
	containerVulns := make(map[string][]*Vulnerability)

	docker.SSHInit(IPAddress)
	fmt.Println("正在扫描:", IPAddress)
	start()
	containers := docker.ListRunningContainers()
	for i, cont := range containers {
		fmt.Printf("扫描容器 %d/%d: %s\n", i+1, len(containers), cont.Name)
		vuls := VerifyVul(cont)
		fmt.Printf("容器 %s 发现 %d 个漏洞\n", cont.Name, len(vuls))

		// 验证漏洞数据有效性
		for _, vuln := range vuls {
			fmt.Println(vuln.Name)
			fmt.Println(vuln.ID)
			if vuln.CvssScore < 0 || vuln.CvssScore > 10 {
				fmt.Printf("警告: 发现CVSS分数不在有效范围内的漏洞: %.1f\n", vuln.CvssScore)
			}
		}

		// 将漏洞添加到结果映射
		containerVulns[cont.Name] = vuls
	}
	end()
	return containerVulns, nil
}
