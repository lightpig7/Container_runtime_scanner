package pentest

import (
	"Container_runtime_scanner/internal/data"
	"Container_runtime_scanner/internal/docker"
	"Container_runtime_scanner/internal/pentest/exp"
	"fmt"
	"log"
	"os"
	"path/filepath"
)

func VerifyVul(cont *docker.Container) {
	if !cont.IsDocker() {
		log.Fatalf("该系统不是容器")
	}
	// 打开日志文件（追加模式）
	logFile, err := os.OpenFile("./internal/data/log/"+cont.Name+"_scan.log", os.O_CREATE|os.O_WRONLY, 0644)

	if err != nil {
		log.Fatalf("无法打开日志文件: %v", err)
	}
	defer logFile.Close()

	// 创建日志记录器
	logger := log.New(logFile, "", log.LstdFlags)
	number := []int{}
	pocs := data.ReadFile("internal/data/database.json")
	for _, poc := range pocs {

		output := cont.ExecSteps(poc.TestCmd)

		if data.RegexGetBool(poc.ExpectedOutput, output) {
			logger.Println("----------------------")
			logger.Printf("漏洞名: %s\n描述: %s\n", poc.PocName, poc.Description)
			logger.Println("该漏洞可能存在")

			number = append(number, poc.Id)
		} else {
			logger.Println(poc.PocName, "漏洞不存在")
		}

		logger.Println("----------------------")
	}
	for _, id := range number {
		if id == 1 {
			exp.Exploit_pri(logger, cont)
		}
		if id == 2 {
			exp.Exploit_sock(logger, cont)
		}
		if id == 3 {
			exp.Exploit_procfs(logger, cont)
		}
		if id == 4 {
			exp.Exploit_cve_2024_21626(logger, cont)
		}
		if id == 5 {
			exp.Exploit_cve_2022_0492(logger, cont)
		}
	}
}

func start() {
	tmpDir := os.TempDir()
	filePath := filepath.Join(tmpDir, "Container_runtime_scanner")
	file, err := os.Create(filePath)
	if err != nil {
		log.Fatalf("文件创建失败: %v", err)
	}
	_, err = file.WriteString("Container_runtime_scanner_123456")
	if err != nil {
		log.Fatalf("文件写入失败: %v", err)
	}
	err1 := file.Close()
	if err1 != nil {
		return
	}

	fmt.Printf("文件已创建: %s\n", filePath)
}
func end() {
	tmpDir := os.TempDir()
	filePath := filepath.Join(tmpDir, "Container_runtime_scanner")
	if err := os.Remove(filePath); err != nil {
		log.Fatalf("文件删除失败: %v", err)
	}
	fmt.Printf("文件已删除: %s\n", filePath)
}
func Run() {
	start()
	containers := docker.ListRunningContainers()
	for _, cont := range containers {
		VerifyVul(cont)
	}
	end()
}
