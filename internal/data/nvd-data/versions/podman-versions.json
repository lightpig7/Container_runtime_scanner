[
  {
    "cveId": "CVE-2024-3056",
    "technology": "podman",
    "version": "*",
    "vulnerable": true,
    "cpeUri": "cpe:2.3:a:podman_project:podman:*:*:*:*:*:*:*:*",
    "description": "A flaw was found in Podman. This issue may allow an attacker to create a specially crafted container that, when configured to share the same IPC with at least one other container, can create a large number of IPC resources in /dev/shm. The malicious container will continue to exhaust resources until it is out-of-memory (OOM) killed. While the malicious container's cgroup will be removed, the IPC resources it created are not. Those resources are tied to the IPC namespace that will not be removed until all containers using it are stopped, and one non-malicious container is holding the namespace open. The malicious container is restarted, either automatically or by attacker control, repeating the process and increasing the amount of memory consumed. With a container configured to restart always, such as `podman run --restart=always`, this can result in a memory-based denial of service of the system.",
    "publishedDate": "2024-08-02T21:16Z",
    "matchingSource": "cpe"
  },
  {
    "cveId": "CVE-2024-57974",
    "technology": "podman",
    "version": "6",
    "vulnerable": false,
    "cpeUri": "",
    "description": "In the Linux kernel, the following vulnerability has been resolved:\n\nudp: Deal with race between UDP socket address change and rehash\n\nIf a UDP socket changes its local address while it's receiving\ndatagrams, as a result of connect(), there is a period during which\na lookup operation might fail to find it, after the address is changed\nbut before the secondary hash (port and address) and the four-tuple\nhash (local and remote ports and addresses) are updated.\n\nSecondary hash chains were introduced by commit 30fff9231fad (\"udp:\nbind() optimisation\") and, as a result, a rehash operation became\nneeded to make a bound socket reachable again after a connect().\n\nThis operation was introduced by commit 719f835853a9 (\"udp: add\nrehash on connect()\") which isn't however a complete fix: the\nsocket will be found once the rehashing completes, but not while\nit's pending.\n\nThis is noticeable with a socat(1) server in UDP4-LISTEN mode, and a\nclient sending datagrams to it. After the server receives the first\ndatagram (cf. _xioopen_ipdgram_listen()), it issues a connect() to\nthe address of the sender, in order to set up a directed flow.\n\nNow, if the client, running on a different CPU thread, happens to\nsend a (subsequent) datagram while the server's socket changes its\naddress, but is not rehashed yet, this will result in a failed\nlookup and a port unreachable error delivered to the client, as\napparent from the following reproducer:\n\n  LEN=$(($(cat /proc/sys/net/core/wmem_default) / 4))\n  dd if=/dev/urandom bs=1 count=${LEN} of=tmp.in\n\n  while :; do\n  \ttaskset -c 1 socat UDP4-LISTEN:1337,null-eof OPEN:tmp.out,create,trunc \u0026\n  \tsleep 0.1 || sleep 1\n  \ttaskset -c 2 socat OPEN:tmp.in UDP4:localhost:1337,shut-null\n  \twait\n  done\n\nwhere the client will eventually get ECONNREFUSED on a write()\n(typically the second or third one of a given iteration):\n\n  2024/11/13 21:28:23 socat[46901] E write(6, 0x556db2e3c000, 8192): Connection refused\n\nThis issue was first observed as a seldom failure in Podman's tests\nchecking UDP functionality while using pasta(1) to connect the\ncontainer's network namespace, which leads us to a reproducer with\nthe lookup error resulting in an ICMP packet on a tap device:\n\n  LOCAL_ADDR=\"$(ip -j -4 addr show|jq -rM '.[] | .addr_info[0] | select(.scope == \"global\").local')\"\n\n  while :; do\n  \t./pasta --config-net -p pasta.pcap -u 1337 socat UDP4-LISTEN:1337,null-eof OPEN:tmp.out,create,trunc \u0026\n  \tsleep 0.2 || sleep 1\n  \tsocat OPEN:tmp.in UDP4:${LOCAL_ADDR}:1337,shut-null\n  \twait\n  \tcmp tmp.in tmp.out\n  done\n\nOnce this fails:\n\n  tmp.in tmp.out differ: char 8193, line 29\n\nwe can finally have a look at what's going on:\n\n  $ tshark -r pasta.pcap\n      1   0.000000           :: ? ff02::16     ICMPv6 110 Multicast Listener Report Message v2\n      2   0.168690 88.198.0.161 ? 88.198.0.164 UDP 8234 60260 ? 1337 Len=8192\n      3   0.168767 88.198.0.161 ? 88.198.0.164 UDP 8234 60260 ? 1337 Len=8192\n      4   0.168806 88.198.0.161 ? 88.198.0.164 UDP 8234 60260 ? 1337 Len=8192\n      5   0.168827 c6:47:05:8d:dc:04 ? Broadcast    ARP 42 Who has 88.198.0.161? Tell 88.198.0.164\n      6   0.168851 9a:55:9a:55:9a:55 ? c6:47:05:8d:dc:04 ARP 42 88.198.0.161 is at 9a:55:9a:55:9a:55\n      7   0.168875 88.198.0.161 ? 88.198.0.164 UDP 8234 60260 ? 1337 Len=8192\n      8   0.168896 88.198.0.164 ? 88.198.0.161 ICMP 590 Destination unreachable (Port unreachable)\n      9   0.168926 88.198.0.161 ? 88.198.0.164 UDP 8234 60260 ? 1337 Len=8192\n     10   0.168959 88.198.0.161 ? 88.198.0.164 UDP 8234 60260 ? 1337 Len=8192\n     11   0.168989 88.198.0.161 ? 88.198.0.164 UDP 4138 60260 ? 1337 Len=4096\n     12   0.169010 88.198.0.161 ? 88.198.0.164 UDP 42 60260 ? 1337 Len=0\n\nOn the third datagram received, the network namespace of the container\ninitiates an ARP lookup to deliver the ICMP message.\n\nIn another variant of this reproducer, starting the client with:\n\n  strace -f pasta --config-net -u 1337 socat UDP4-LISTEN:1337,null-eof OPEN:tmp.out,create,tru\n---truncated---",
    "publishedDate": "2025-02-27T02:15Z",
    "matchingSource": "description"
  },
  {
    "cveId": "CVE-2024-57974",
    "technology": "podman",
    "version": "2",
    "vulnerable": false,
    "cpeUri": "",
    "description": "In the Linux kernel, the following vulnerability has been resolved:\n\nudp: Deal with race between UDP socket address change and rehash\n\nIf a UDP socket changes its local address while it's receiving\ndatagrams, as a result of connect(), there is a period during which\na lookup operation might fail to find it, after the address is changed\nbut before the secondary hash (port and address) and the four-tuple\nhash (local and remote ports and addresses) are updated.\n\nSecondary hash chains were introduced by commit 30fff9231fad (\"udp:\nbind() optimisation\") and, as a result, a rehash operation became\nneeded to make a bound socket reachable again after a connect().\n\nThis operation was introduced by commit 719f835853a9 (\"udp: add\nrehash on connect()\") which isn't however a complete fix: the\nsocket will be found once the rehashing completes, but not while\nit's pending.\n\nThis is noticeable with a socat(1) server in UDP4-LISTEN mode, and a\nclient sending datagrams to it. After the server receives the first\ndatagram (cf. _xioopen_ipdgram_listen()), it issues a connect() to\nthe address of the sender, in order to set up a directed flow.\n\nNow, if the client, running on a different CPU thread, happens to\nsend a (subsequent) datagram while the server's socket changes its\naddress, but is not rehashed yet, this will result in a failed\nlookup and a port unreachable error delivered to the client, as\napparent from the following reproducer:\n\n  LEN=$(($(cat /proc/sys/net/core/wmem_default) / 4))\n  dd if=/dev/urandom bs=1 count=${LEN} of=tmp.in\n\n  while :; do\n  \ttaskset -c 1 socat UDP4-LISTEN:1337,null-eof OPEN:tmp.out,create,trunc \u0026\n  \tsleep 0.1 || sleep 1\n  \ttaskset -c 2 socat OPEN:tmp.in UDP4:localhost:1337,shut-null\n  \twait\n  done\n\nwhere the client will eventually get ECONNREFUSED on a write()\n(typically the second or third one of a given iteration):\n\n  2024/11/13 21:28:23 socat[46901] E write(6, 0x556db2e3c000, 8192): Connection refused\n\nThis issue was first observed as a seldom failure in Podman's tests\nchecking UDP functionality while using pasta(1) to connect the\ncontainer's network namespace, which leads us to a reproducer with\nthe lookup error resulting in an ICMP packet on a tap device:\n\n  LOCAL_ADDR=\"$(ip -j -4 addr show|jq -rM '.[] | .addr_info[0] | select(.scope == \"global\").local')\"\n\n  while :; do\n  \t./pasta --config-net -p pasta.pcap -u 1337 socat UDP4-LISTEN:1337,null-eof OPEN:tmp.out,create,trunc \u0026\n  \tsleep 0.2 || sleep 1\n  \tsocat OPEN:tmp.in UDP4:${LOCAL_ADDR}:1337,shut-null\n  \twait\n  \tcmp tmp.in tmp.out\n  done\n\nOnce this fails:\n\n  tmp.in tmp.out differ: char 8193, line 29\n\nwe can finally have a look at what's going on:\n\n  $ tshark -r pasta.pcap\n      1   0.000000           :: ? ff02::16     ICMPv6 110 Multicast Listener Report Message v2\n      2   0.168690 88.198.0.161 ? 88.198.0.164 UDP 8234 60260 ? 1337 Len=8192\n      3   0.168767 88.198.0.161 ? 88.198.0.164 UDP 8234 60260 ? 1337 Len=8192\n      4   0.168806 88.198.0.161 ? 88.198.0.164 UDP 8234 60260 ? 1337 Len=8192\n      5   0.168827 c6:47:05:8d:dc:04 ? Broadcast    ARP 42 Who has 88.198.0.161? Tell 88.198.0.164\n      6   0.168851 9a:55:9a:55:9a:55 ? c6:47:05:8d:dc:04 ARP 42 88.198.0.161 is at 9a:55:9a:55:9a:55\n      7   0.168875 88.198.0.161 ? 88.198.0.164 UDP 8234 60260 ? 1337 Len=8192\n      8   0.168896 88.198.0.164 ? 88.198.0.161 ICMP 590 Destination unreachable (Port unreachable)\n      9   0.168926 88.198.0.161 ? 88.198.0.164 UDP 8234 60260 ? 1337 Len=8192\n     10   0.168959 88.198.0.161 ? 88.198.0.164 UDP 8234 60260 ? 1337 Len=8192\n     11   0.168989 88.198.0.161 ? 88.198.0.164 UDP 4138 60260 ? 1337 Len=4096\n     12   0.169010 88.198.0.161 ? 88.198.0.164 UDP 42 60260 ? 1337 Len=0\n\nOn the third datagram received, the network namespace of the container\ninitiates an ARP lookup to deliver the ICMP message.\n\nIn another variant of this reproducer, starting the client with:\n\n  strace -f pasta --config-net -u 1337 socat UDP4-LISTEN:1337,null-eof OPEN:tmp.out,create,tru\n---truncated---",
    "publishedDate": "2025-02-27T02:15Z",
    "matchingSource": "description"
  },
  {
    "cveId": "CVE-2023-0778",
    "technology": "podman",
    "version": "-",
    "vulnerable": true,
    "cpeUri": "cpe:2.3:a:podman_project:podman:-:*:*:*:*:*:*:*",
    "description": "A Time-of-check Time-of-use (TOCTOU) flaw was found in podman. This issue may allow a malicious user to replace a normal file in a volume with a symlink while exporting the volume, allowing for access to arbitrary files on the host file system.",
    "publishedDate": "2023-03-27T21:15Z",
    "cvssScore": 6.8,
    "severity": "MEDIUM",
    "matchingSource": "cpe",
    "versionRange": {
      "startIncluding": "-",
      "startExcluding": "-"
    }
  },
  {
    "cveId": "CVE-2023-25809",
    "technology": "podman",
    "version": "1.1.5",
    "vulnerable": false,
    "cpeUri": "",
    "description": "runc is a CLI tool for spawning and running containers according to the OCI specification. In affected versions it was found that rootless runc makes `/sys/fs/cgroup` writable in following conditons: 1. when runc is executed inside the user namespace, and the `config.json` does not specify the cgroup namespace to be unshared (e.g.., `(docker|podman|nerdctl) run --cgroupns=host`, with Rootless Docker/Podman/nerdctl) or 2. when runc is executed outside the user namespace, and `/sys` is mounted with `rbind, ro` (e.g., `runc spec --rootless`; this condition is very rare). A container may gain the write access to user-owned cgroup hierarchy `/sys/fs/cgroup/user.slice/...` on the host . Other users's cgroup hierarchies are not affected. Users are advised to upgrade to version 1.1.5. Users unable to upgrade may unshare the cgroup namespace (`(docker|podman|nerdctl) run --cgroupns=private)`. This is the default behavior of Docker/Podman/nerdctl on cgroup v2 hosts. or add `/sys/fs/cgroup` to `maskedPaths`.\n",
    "publishedDate": "2023-03-29T19:15Z",
    "cvssScore": 6.3,
    "severity": "MEDIUM",
    "matchingSource": "description"
  },
  {
    "cveId": "CVE-2023-25809",
    "technology": "podman",
    "version": "2",
    "vulnerable": false,
    "cpeUri": "",
    "description": "runc is a CLI tool for spawning and running containers according to the OCI specification. In affected versions it was found that rootless runc makes `/sys/fs/cgroup` writable in following conditons: 1. when runc is executed inside the user namespace, and the `config.json` does not specify the cgroup namespace to be unshared (e.g.., `(docker|podman|nerdctl) run --cgroupns=host`, with Rootless Docker/Podman/nerdctl) or 2. when runc is executed outside the user namespace, and `/sys` is mounted with `rbind, ro` (e.g., `runc spec --rootless`; this condition is very rare). A container may gain the write access to user-owned cgroup hierarchy `/sys/fs/cgroup/user.slice/...` on the host . Other users's cgroup hierarchies are not affected. Users are advised to upgrade to version 1.1.5. Users unable to upgrade may unshare the cgroup namespace (`(docker|podman|nerdctl) run --cgroupns=private)`. This is the default behavior of Docker/Podman/nerdctl on cgroup v2 hosts. or add `/sys/fs/cgroup` to `maskedPaths`.\n",
    "publishedDate": "2023-03-29T19:15Z",
    "cvssScore": 6.3,
    "severity": "MEDIUM",
    "matchingSource": "description"
  },
  {
    "cveId": "CVE-2022-1227",
    "technology": "podman",
    "version": "*",
    "vulnerable": true,
    "cpeUri": "cpe:2.3:a:podman_project:podman:*:*:*:*:*:*:*:*",
    "description": "A privilege escalation flaw was found in Podman. This flaw allows an attacker to publish a malicious image to a public registry. Once this image is downloaded by a potential victim, the vulnerability is triggered after a user runs the 'podman top' command. This action gives the attacker access to the host filesystem, leading to information disclosure or denial of service.",
    "publishedDate": "2022-04-29T16:15Z",
    "cvssScore": 8.8,
    "severity": "HIGH",
    "matchingSource": "cpe"
  },
  {
    "cveId": "CVE-2022-2738",
    "technology": "podman",
    "version": "1.6.4-32.el7_9",
    "vulnerable": true,
    "cpeUri": "cpe:2.3:a:podman_project:podman:1.6.4-32.el7_9:*:*:*:*:*:*:*",
    "description": "The version of podman as released for Red Hat Enterprise Linux 7 Extras via RHSA-2022:2190 advisory included an incorrect version of podman missing the fix for CVE-2020-8945, which was previously fixed via RHSA-2020:2117. This issue could possibly be used to crash or cause potential code execution in Go applications that use the Go GPGME wrapper library, under certain conditions, during GPG signature verification.",
    "publishedDate": "2022-09-01T21:15Z",
    "cvssScore": 7.5,
    "severity": "HIGH",
    "matchingSource": "cpe",
    "versionRange": {
      "startIncluding": "1.6.4-32.el7_9",
      "startExcluding": "1.6.4-32.el7_9"
    }
  },
  {
    "cveId": "CVE-2022-2739",
    "technology": "podman",
    "version": "1.6.4-32.el7_9",
    "vulnerable": true,
    "cpeUri": "cpe:2.3:a:podman_project:podman:1.6.4-32.el7_9:*:*:*:*:*:*:*",
    "description": "The version of podman as released for Red Hat Enterprise Linux 7 Extras via RHSA-2022:2190 advisory included an incorrect version of podman missing the fix for CVE-2020-14370, which was previously fixed via RHSA-2020:5056. This issue could possibly allow an attacker to gain access to sensitive information stored in environment variables.",
    "publishedDate": "2022-09-01T21:15Z",
    "cvssScore": 5.3,
    "severity": "MEDIUM",
    "matchingSource": "cpe",
    "versionRange": {
      "startIncluding": "1.6.4-32.el7_9",
      "startExcluding": "1.6.4-32.el7_9"
    }
  },
  {
    "cveId": "CVE-2022-27649",
    "technology": "podman",
    "version": "*",
    "vulnerable": true,
    "cpeUri": "cpe:2.3:a:podman_project:podman:*:*:*:*:*:*:*:*",
    "description": "A flaw was found in Podman, where containers were started incorrectly with non-empty default permissions. A vulnerability was found in Moby (Docker Engine), where containers were started incorrectly with non-empty inheritable Linux process capabilities. This flaw allows an attacker with access to programs with inheritable file capabilities to elevate those capabilities to the permitted set when execve(2) runs.",
    "publishedDate": "2022-04-04T20:15Z",
    "cvssScore": 7.5,
    "severity": "HIGH",
    "matchingSource": "cpe"
  },
  {
    "cveId": "CVE-2022-2989",
    "technology": "podman",
    "version": "*",
    "vulnerable": true,
    "cpeUri": "cpe:2.3:a:podman_project:podman:*:*:*:*:*:*:*:*",
    "description": "An incorrect handling of the supplementary groups in the Podman container engine might lead to the sensitive information disclosure or possible data modification if an attacker has direct access to the affected container where supplementary groups are used to set access permissions and is able to execute a binary code in that container.",
    "publishedDate": "2022-09-13T14:15Z",
    "cvssScore": 7.1,
    "severity": "HIGH",
    "matchingSource": "cpe"
  },
  {
    "cveId": "CVE-2022-4122",
    "technology": "podman",
    "version": "4.3.0",
    "vulnerable": true,
    "cpeUri": "cpe:2.3:a:podman_project:podman:4.3.0:-:*:*:*:*:*:*",
    "description": "A vulnerability was found in buildah. Incorrect following of symlinks while reading .containerignore and .dockerignore results in information disclosure.",
    "publishedDate": "2022-12-08T16:15Z",
    "cvssScore": 5.3,
    "severity": "MEDIUM",
    "matchingSource": "cpe",
    "versionRange": {
      "startIncluding": "4.3.0",
      "startExcluding": "4.3.0"
    }
  },
  {
    "cveId": "CVE-2022-4123",
    "technology": "podman",
    "version": "4.2.1",
    "vulnerable": true,
    "cpeUri": "cpe:2.3:a:podman_project:podman:4.2.1:*:*:*:*:*:*:*",
    "description": "A flaw was found in Buildah. The local path and the lowest subdirectory may be disclosed due to incorrect absolute path traversal, resulting in an impact to confidentiality.",
    "publishedDate": "2022-12-08T16:15Z",
    "cvssScore": 3.3,
    "severity": "LOW",
    "matchingSource": "cpe",
    "versionRange": {
      "startIncluding": "4.2.1",
      "startExcluding": "4.2.1"
    }
  },
  {
    "cveId": "CVE-2022-4123",
    "technology": "podman",
    "version": "4.1.1",
    "vulnerable": true,
    "cpeUri": "cpe:2.3:a:podman_project:podman:4.1.1:*:*:*:*:*:*:*",
    "description": "A flaw was found in Buildah. The local path and the lowest subdirectory may be disclosed due to incorrect absolute path traversal, resulting in an impact to confidentiality.",
    "publishedDate": "2022-12-08T16:15Z",
    "cvssScore": 3.3,
    "severity": "LOW",
    "matchingSource": "cpe",
    "versionRange": {
      "startIncluding": "4.1.1",
      "startExcluding": "4.1.1"
    }
  },
  {
    "cveId": "CVE-2022-4123",
    "technology": "podman",
    "version": "4.2.0",
    "vulnerable": true,
    "cpeUri": "cpe:2.3:a:podman_project:podman:4.2.0:rc2:*:*:*:*:*:*",
    "description": "A flaw was found in Buildah. The local path and the lowest subdirectory may be disclosed due to incorrect absolute path traversal, resulting in an impact to confidentiality.",
    "publishedDate": "2022-12-08T16:15Z",
    "cvssScore": 3.3,
    "severity": "LOW",
    "matchingSource": "cpe",
    "versionRange": {
      "startIncluding": "4.2.0",
      "startExcluding": "4.2.0"
    }
  },
  {
    "cveId": "CVE-2022-4123",
    "technology": "podman",
    "version": "4.2.0",
    "vulnerable": true,
    "cpeUri": "cpe:2.3:a:podman_project:podman:4.2.0:rc1:*:*:*:*:*:*",
    "description": "A flaw was found in Buildah. The local path and the lowest subdirectory may be disclosed due to incorrect absolute path traversal, resulting in an impact to confidentiality.",
    "publishedDate": "2022-12-08T16:15Z",
    "cvssScore": 3.3,
    "severity": "LOW",
    "matchingSource": "cpe",
    "versionRange": {
      "startIncluding": "4.2.0",
      "startExcluding": "4.2.0"
    }
  },
  {
    "cveId": "CVE-2022-4123",
    "technology": "podman",
    "version": "4.2.0",
    "vulnerable": true,
    "cpeUri": "cpe:2.3:a:podman_project:podman:4.2.0:rc3:*:*:*:*:*:*",
    "description": "A flaw was found in Buildah. The local path and the lowest subdirectory may be disclosed due to incorrect absolute path traversal, resulting in an impact to confidentiality.",
    "publishedDate": "2022-12-08T16:15Z",
    "cvssScore": 3.3,
    "severity": "LOW",
    "matchingSource": "cpe",
    "versionRange": {
      "startIncluding": "4.2.0",
      "startExcluding": "4.2.0"
    }
  },
  {
    "cveId": "CVE-2022-4123",
    "technology": "podman",
    "version": "4.2.0",
    "vulnerable": true,
    "cpeUri": "cpe:2.3:a:podman_project:podman:4.2.0:-:*:*:*:*:*:*",
    "description": "A flaw was found in Buildah. The local path and the lowest subdirectory may be disclosed due to incorrect absolute path traversal, resulting in an impact to confidentiality.",
    "publishedDate": "2022-12-08T16:15Z",
    "cvssScore": 3.3,
    "severity": "LOW",
    "matchingSource": "cpe",
    "versionRange": {
      "startIncluding": "4.2.0",
      "startExcluding": "4.2.0"
    }
  },
  {
    "cveId": "CVE-2022-4123",
    "technology": "podman",
    "version": "4.1.0",
    "vulnerable": true,
    "cpeUri": "cpe:2.3:a:podman_project:podman:4.1.0:rc2:*:*:*:*:*:*",
    "description": "A flaw was found in Buildah. The local path and the lowest subdirectory may be disclosed due to incorrect absolute path traversal, resulting in an impact to confidentiality.",
    "publishedDate": "2022-12-08T16:15Z",
    "cvssScore": 3.3,
    "severity": "LOW",
    "matchingSource": "cpe",
    "versionRange": {
      "startIncluding": "4.1.0",
      "startExcluding": "4.1.0"
    }
  },
  {
    "cveId": "CVE-2022-4123",
    "technology": "podman",
    "version": "4.1.0",
    "vulnerable": true,
    "cpeUri": "cpe:2.3:a:podman_project:podman:4.1.0:-:*:*:*:*:*:*",
    "description": "A flaw was found in Buildah. The local path and the lowest subdirectory may be disclosed due to incorrect absolute path traversal, resulting in an impact to confidentiality.",
    "publishedDate": "2022-12-08T16:15Z",
    "cvssScore": 3.3,
    "severity": "LOW",
    "matchingSource": "cpe",
    "versionRange": {
      "startIncluding": "4.1.0",
      "startExcluding": "4.1.0"
    }
  },
  {
    "cveId": "CVE-2022-4123",
    "technology": "podman",
    "version": "4.1.0",
    "vulnerable": true,
    "cpeUri": "cpe:2.3:a:podman_project:podman:4.1.0:rc1:*:*:*:*:*:*",
    "description": "A flaw was found in Buildah. The local path and the lowest subdirectory may be disclosed due to incorrect absolute path traversal, resulting in an impact to confidentiality.",
    "publishedDate": "2022-12-08T16:15Z",
    "cvssScore": 3.3,
    "severity": "LOW",
    "matchingSource": "cpe",
    "versionRange": {
      "startIncluding": "4.1.0",
      "startExcluding": "4.1.0"
    }
  },
  {
    "cveId": "CVE-2022-4123",
    "technology": "podman",
    "version": "4.3.0",
    "vulnerable": true,
    "cpeUri": "cpe:2.3:a:podman_project:podman:4.3.0:-:*:*:*:*:*:*",
    "description": "A flaw was found in Buildah. The local path and the lowest subdirectory may be disclosed due to incorrect absolute path traversal, resulting in an impact to confidentiality.",
    "publishedDate": "2022-12-08T16:15Z",
    "cvssScore": 3.3,
    "severity": "LOW",
    "matchingSource": "cpe",
    "versionRange": {
      "startIncluding": "4.3.0",
      "startExcluding": "4.3.0"
    }
  },
  {
    "cveId": "CVE-2021-20188",
    "technology": "podman",
    "version": "*",
    "vulnerable": true,
    "cpeUri": "cpe:2.3:a:podman_project:podman:*:*:*:*:*:*:*:*",
    "description": "A flaw was found in podman before 1.7.0. File permissions for non-root users running in a privileged container are not correctly checked. This flaw can be abused by a low-privileged user inside the container to access any other file in the container, even if owned by the root user inside the container. It does not allow to directly escape the container, though being a privileged container means that a lot of security features are disabled when running the container. The highest threat from this vulnerability is to data confidentiality and integrity as well as system availability.",
    "publishedDate": "2021-02-11T18:15Z",
    "cvssScore": 7,
    "severity": "HIGH",
    "matchingSource": "cpe"
  },
  {
    "cveId": "CVE-2021-20199",
    "technology": "podman",
    "version": "*",
    "vulnerable": true,
    "cpeUri": "cpe:2.3:a:podman_project:podman:*:*:*:*:*:*:*:*",
    "description": "Rootless containers run with Podman, receive all traffic with a source IP address of 127.0.0.1 (including from remote hosts). This impacts containerized applications that trust localhost (127.0.01) connections by default and do not require authentication. This issue affects Podman 1.8.0 onwards.",
    "publishedDate": "2021-02-02T19:15Z",
    "cvssScore": 5.9,
    "severity": "MEDIUM",
    "matchingSource": "cpe"
  },
  {
    "cveId": "CVE-2021-4024",
    "technology": "podman",
    "version": "*",
    "vulnerable": true,
    "cpeUri": "cpe:2.3:a:podman_project:podman:*:*:*:*:*:*:*:*",
    "description": "A flaw was found in podman. The `podman machine` function (used to create and manage Podman virtual machine containing a Podman process) spawns a `gvproxy` process on the host system. The `gvproxy` API is accessible on port 7777 on all IP addresses on the host. If that port is open on the host's firewall, an attacker can potentially use the `gvproxy` API to forward ports on the host to ports in the VM, making private services on the VM accessible to the network. This issue could be also used to interrupt the host's services by forwarding all ports to the VM.",
    "publishedDate": "2021-12-23T20:15Z",
    "cvssScore": 6.5,
    "severity": "MEDIUM",
    "matchingSource": "cpe"
  },
  {
    "cveId": "CVE-2020-14370",
    "technology": "podman",
    "version": "*",
    "vulnerable": true,
    "cpeUri": "cpe:2.3:a:podman_project:podman:*:*:*:*:*:*:*:*",
    "description": "An information disclosure vulnerability was found in containers/podman in versions before 2.0.5. When using the deprecated Varlink API or the Docker-compatible REST API, if multiple containers are created in a short duration, the environment variables from the first container will get leaked into subsequent containers. An attacker who has control over the subsequent containers could use this flaw to gain access to sensitive information stored in such variables.",
    "publishedDate": "2020-09-23T13:15Z",
    "cvssScore": 5.3,
    "severity": "MEDIUM",
    "matchingSource": "cpe"
  },
  {
    "cveId": "CVE-2020-1726",
    "technology": "podman",
    "version": "1.6.0",
    "vulnerable": false,
    "cpeUri": "",
    "description": "A flaw was discovered in Podman where it incorrectly allows containers when created to overwrite existing files in volumes, even if they are mounted as read-only. When a user runs a malicious container or a container based on a malicious image with an attached volume that is used for the first time, it is possible to trigger the flaw and overwrite files in the volume.This issue was introduced in version 1.6.0.",
    "publishedDate": "2020-02-11T20:15Z",
    "cvssScore": 5.9,
    "severity": "MEDIUM",
    "matchingSource": "description"
  }
]