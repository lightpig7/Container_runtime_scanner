[
  {
    "cveId": "CVE-2024-31391",
    "technology": "k8s",
    "version": "0.8.1",
    "vulnerable": false,
    "cpeUri": "",
    "description": "Insertion of Sensitive Information into Log File vulnerability in the Apache Solr Operator.\n\nThis issue affects all versions of the Apache Solr Operator from 0.3.0 through 0.8.0.\n\nWhen asked to bootstrap Solr security, the operator will enable basic authentication and create several accounts for accessing Solr: including the \"solr\" and \"admin\" accounts for use by end-users, and a \"k8s-oper\" account which the operator uses for its own requests to Solr.\nOne common source of these operator requests is healthchecks: liveness, readiness, and startup probes are all used to determine Solr's health and ability to receive traffic.\nBy default, the operator configures the Solr APIs used for these probes to be exempt from authentication, but users may specifically request that authentication be required on probe endpoints as well.\nWhenever one of these probes would fail, if authentication was in use, the Solr Operator would create a Kubernetes \"event\" containing the username and password of the \"k8s-oper\" account.\n\nWithin the affected version range, this vulnerability affects any solrcloud resource which (1) bootstrapped security through use of the `.solrOptions.security.authenticationType=basic` option, and (2) required authentication be used on probes by setting `.solrOptions.security.probesRequireAuth=true`.\n\nUsers are recommended to upgrade to Solr Operator version 0.8.1, which fixes this issue by ensuring that probes no longer print the credentials used for Solr requests.  Users may also mitigate the vulnerability by disabling authentication on their healthcheck probes using the setting `.solrOptions.security.probesRequireAuth=false`.",
    "publishedDate": "2024-04-12T15:15Z",
    "matchingSource": "description"
  },
  {
    "cveId": "CVE-2024-36111",
    "technology": "k8s",
    "version": "1.6.3",
    "vulnerable": false,
    "cpeUri": "",
    "description": "KubePi is a K8s panel. Starting in version 1.6.3 and prior to version 1.8.0, there is a defect in the KubePi JWT token verification. The JWT key in the default configuration file is empty. Although a random 32-bit string will be generated to overwrite the key in the configuration file when the key is detected to be empty in the configuration file reading logic, the key is empty during actual verification. Using an empty key to generate a JWT token can bypass the login verification and directly take over the back end. Version 1.8.0 contains a patch for this issue.",
    "publishedDate": "2024-07-25T14:15Z",
    "matchingSource": "description"
  },
  {
    "cveId": "CVE-2024-36111",
    "technology": "k8s",
    "version": "1.8.0",
    "vulnerable": false,
    "cpeUri": "",
    "description": "KubePi is a K8s panel. Starting in version 1.6.3 and prior to version 1.8.0, there is a defect in the KubePi JWT token verification. The JWT key in the default configuration file is empty. Although a random 32-bit string will be generated to overwrite the key in the configuration file when the key is detected to be empty in the configuration file reading logic, the key is empty during actual verification. Using an empty key to generate a JWT token can bypass the login verification and directly take over the back end. Version 1.8.0 contains a patch for this issue.",
    "publishedDate": "2024-07-25T14:15Z",
    "matchingSource": "description"
  },
  {
    "cveId": "CVE-2024-36111",
    "technology": "k8s",
    "version": "1.8.0",
    "vulnerable": false,
    "cpeUri": "",
    "description": "KubePi is a K8s panel. Starting in version 1.6.3 and prior to version 1.8.0, there is a defect in the KubePi JWT token verification. The JWT key in the default configuration file is empty. Although a random 32-bit string will be generated to overwrite the key in the configuration file when the key is detected to be empty in the configuration file reading logic, the key is empty during actual verification. Using an empty key to generate a JWT token can bypass the login verification and directly take over the back end. Version 1.8.0 contains a patch for this issue.",
    "publishedDate": "2024-07-25T14:15Z",
    "matchingSource": "description"
  },
  {
    "cveId": "CVE-2024-53349",
    "technology": "k8s",
    "version": "0.11.3",
    "vulnerable": false,
    "cpeUri": "",
    "description": "Insecure permissions in kuadrant v0.11.3 allow attackers to gain access to the service account's token, leading to escalation of privileges via the secretes component in the k8s cluster",
    "publishedDate": "2025-03-21T16:15Z",
    "matchingSource": "description"
  },
  {
    "cveId": "CVE-2024-53862",
    "technology": "k8s",
    "version": "1",
    "vulnerable": false,
    "cpeUri": "",
    "description": "Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. When using `--auth-mode=client`, Archived Workflows can be retrieved with a fake or spoofed token via the GET Workflow endpoint: `/api/v1/workflows/{namespace}/{name}` or when using `--auth-mode=sso`, all Archived Workflows can be retrieved with a valid token via the GET Workflow endpoint: `/api/v1/workflows/{namespace}/{name}`. No authentication is performed by the Server itself on `client` tokens. Authentication \u0026 authorization is instead delegated to the k8s API server. However, the Workflow Archive does not interact with k8s, and so any token that looks valid will be considered authenticated, even if it is not a k8s token or even if the token has no RBAC for Argo. To handle the lack of pass-through k8s authN/authZ, the Workflow Archive specifically does the equivalent of a `kubectl auth can-i` check for respective methods. In 3.5.7 and 3.5.8, the auth check was accidentally removed on the GET Workflow endpoint's fallback to archived workflows on these lines, allowing archived workflows to be retrieved with a fake token. This vulnerability is fixed in 3.6.2 and 3.5.13.",
    "publishedDate": "2024-12-02T16:15Z",
    "matchingSource": "description"
  },
  {
    "cveId": "CVE-2024-53862",
    "technology": "k8s",
    "version": "1",
    "vulnerable": false,
    "cpeUri": "",
    "description": "Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. When using `--auth-mode=client`, Archived Workflows can be retrieved with a fake or spoofed token via the GET Workflow endpoint: `/api/v1/workflows/{namespace}/{name}` or when using `--auth-mode=sso`, all Archived Workflows can be retrieved with a valid token via the GET Workflow endpoint: `/api/v1/workflows/{namespace}/{name}`. No authentication is performed by the Server itself on `client` tokens. Authentication \u0026 authorization is instead delegated to the k8s API server. However, the Workflow Archive does not interact with k8s, and so any token that looks valid will be considered authenticated, even if it is not a k8s token or even if the token has no RBAC for Argo. To handle the lack of pass-through k8s authN/authZ, the Workflow Archive specifically does the equivalent of a `kubectl auth can-i` check for respective methods. In 3.5.7 and 3.5.8, the auth check was accidentally removed on the GET Workflow endpoint's fallback to archived workflows on these lines, allowing archived workflows to be retrieved with a fake token. This vulnerability is fixed in 3.6.2 and 3.5.13.",
    "publishedDate": "2024-12-02T16:15Z",
    "matchingSource": "description"
  },
  {
    "cveId": "CVE-2023-22463",
    "technology": "k8s",
    "version": "1.6.2",
    "vulnerable": false,
    "cpeUri": "",
    "description": "KubePi is a k8s panel. The jwt authentication function of KubePi through version 1.6.2 uses hard-coded Jwtsigkeys, resulting in the same Jwtsigkeys for all online projects. This means that an attacker can forge any jwt token to take over the administrator account of any online project. Furthermore, they may use the administrator to take over the k8s cluster of the target enterprise. `session.go`, the use of hard-coded JwtSigKey, allows an attacker to use this value to forge jwt tokens arbitrarily. The JwtSigKey is confidential and should not be hard-coded in the code. The vulnerability has been fixed in 1.6.3. In the patch, JWT key is specified in app.yml. If the user leaves it blank, a random key will be used. There are no workarounds aside from upgrading.",
    "publishedDate": "2023-01-04T16:15Z",
    "cvssScore": 9.8,
    "severity": "CRITICAL",
    "matchingSource": "description"
  },
  {
    "cveId": "CVE-2023-22480",
    "technology": "k8s",
    "version": "3.16.4",
    "vulnerable": false,
    "cpeUri": "",
    "description": "KubeOperator is an open source Kubernetes distribution focused on helping enterprises plan, deploy and operate production-level K8s clusters. In KubeOperator versions 3.16.3 and below, API interfaces with unauthorized entities and can leak sensitive information. This vulnerability could be used to take over the cluster under certain conditions. This issue has been patched in version 3.16.4.\n",
    "publishedDate": "2023-01-14T01:15Z",
    "cvssScore": 9.8,
    "severity": "CRITICAL",
    "matchingSource": "description"
  },
  {
    "cveId": "CVE-2023-37264",
    "technology": "k8s",
    "version": "0.35.0",
    "vulnerable": false,
    "cpeUri": "",
    "description": "Tekton Pipelines project provides k8s-style resources for declaring CI/CD-style pipelines. Starting in version 0.35.0, pipelines do not validate child UIDs, which means that a user that has access to create TaskRuns can create their own Tasks that the Pipelines controller will accept as the child Task. While the software stores and validates the PipelineRun's (api version, kind, name, uid) in the child Run's OwnerReference, it only store (api version, kind, name) in the ChildStatusReference. This means that if a client had access to create TaskRuns on a cluster, they could create a child TaskRun for a pipeline with the same name + owner reference, and the Pipeline controller picks it up as if it was the original TaskRun. This is problematic since it can let users modify the config of Pipelines at runtime, which violates SLSA L2 Service Generated / Non-falsifiable requirements. This issue can be used to trick the Pipeline controller into associating unrelated Runs to the Pipeline, feeding its data through the rest of the Pipeline. This requires access to create TaskRuns, so impact may vary depending on one Tekton setup. If users already have unrestricted access to create any Task/PipelineRun, this does not grant any additional capabilities. As of time of publication, there are no known patches for this issue.",
    "publishedDate": "2023-07-07T17:15Z",
    "cvssScore": 4.3,
    "severity": "MEDIUM",
    "matchingSource": "description"
  },
  {
    "cveId": "CVE-2023-48225",
    "technology": "k8s",
    "version": "1.0.0-beta.13",
    "vulnerable": false,
    "cpeUri": "",
    "description": "Laf is a cloud development platform. Prior to version 1.0.0-beta.13, the control of LAF app enV is not strict enough, and in certain scenarios of privatization environment, it may lead to sensitive information leakage in secret and configmap. In ES6 syntax, if an obj directly references another obj, the name of the obj itself will be used as the key, and the entire object structure will be integrated intact. When constructing the deployment instance of the app, env was found from the database and directly inserted into the template, resulting in controllability here. Sensitive information in the secret and configmap can be read through the k8s envFrom field. In a privatization environment, when `namespaceConf. fixed` is marked, it may lead to the leakage of sensitive information in the system. As of time of publication, it is unclear whether any patches or workarounds exist.",
    "publishedDate": "2023-12-12T21:15Z",
    "cvssScore": 9.1,
    "severity": "CRITICAL",
    "matchingSource": "description"
  },
  {
    "cveId": "CVE-2023-50253",
    "technology": "k8s",
    "version": "1.0.0-beta.13",
    "vulnerable": false,
    "cpeUri": "",
    "description": "Laf is a cloud development platform. In the Laf version design, the log uses communication with k8s to quickly retrieve logs from the container without the need for additional storage. However, in version 1.0.0-beta.13 and prior, this interface does not verify the permissions of the pod, which allows authenticated users to obtain any pod logs under the same namespace through this method, thereby obtaining sensitive information printed in the logs. As of time of publication, no known patched versions exist.",
    "publishedDate": "2024-01-03T17:15Z",
    "cvssScore": 6.5,
    "severity": "MEDIUM",
    "matchingSource": "description"
  },
  {
    "cveId": "CVE-2023-51699",
    "technology": "k8s",
    "version": "0.9.3",
    "vulnerable": false,
    "cpeUri": "",
    "description": "Fluid is an open source Kubernetes-native Distributed Dataset Orchestrator and Accelerator for data-intensive applications. An OS command injection vulnerability within the Fluid project's JuicefsRuntime can potentially allow an authenticated user, who has the authority to create or update the K8s CRD Dataset/JuicefsRuntime, to execute arbitrary OS commands within the juicefs related containers. This could lead to unauthorized access, modification or deletion of data. Users who're using versions \u003c 0.9.3 with JuicefsRuntime should upgrade to v0.9.3.",
    "publishedDate": "2024-03-15T19:15Z",
    "matchingSource": "description"
  }
]